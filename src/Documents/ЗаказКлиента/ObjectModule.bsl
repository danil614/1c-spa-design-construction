#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	// Берем ссылку опроса клиента в заказ клиента
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОпросКлиента") Тогда
		ОпросКлиента = ДанныеЗаполнения;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	РассчитатьСуммуЗаказа();
	ПроверитьДатыЭтапов(Отказ);
	ПроверитьНомерЭтапаВСпискеМатериалов(Отказ);
	ПроверитьГрафикОплат(Отказ);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	РассчитатьСуммуЗаказа();
	ПроверитьИзменениеСтатусовЭтапов(Отказ);
	ПроверитьИзменениеСтатусаЗаказа(Отказ);
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	ПроверитьОплатыПоЗаказуПередВыполнениемЭтапов(Отказ);
	ЗаписатьДвиженияДенежныхСредствПоЭтапам(Отказ);
	ОбновитьИсториюИзмененияСтатусовЭтапов(Отказ);
	ОбновитьИсториюИзмененияСтатусовЗаказа(Отказ);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьИзменениеСтатусаЗаказа(Отказ)
	// Если документ уже записывали, то проверяем предыдущий статус
	// Получаем предыдуший статус заказа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКлиента.СтатусЗаказа
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Если Выборка.Следующий() Тогда
		// Есть предыдущий документ
		ПредыдущийСтатусЗаказа = Перечисления.СтатусЗаказа.Индекс(Выборка.СтатусЗаказа);
		ТекущийСтатусЗаказа = Перечисления.СтатусЗаказа.Индекс(СтатусЗаказа);
			
		// Можем поднять статус заказа выше только на 1
		Если Не (ТекущийСтатусЗаказа - ПредыдущийСтатусЗаказа = 0 Или ТекущийСтатусЗаказа - ПредыдущийСтатусЗаказа = 1) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Статус заказа можно сменить только на один выше";
			Сообщение.Поле = "СтатусЗаказа";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();

			Отказ = Истина;
		КонецЕсли;
	Иначе
		// Если документ новый, то статус заказа должны быть только Проект
		Если СтатусЗаказа <> Перечисления.СтатусЗаказа.Проект Тогда
			// Ошибка
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Статус заказа для нового заказа должен быть равен ""Проект""";
			Сообщение.Поле = "СтатусЗаказа";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();

			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьИзменениеСтатусовЭтапов(Отказ)
	// Получаем предыдущие и текущие статусы этапов, совпадающие по номеру строки и услуге. И не совпадающие по статусу
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокЭтапов.НомерСтроки,
	|	СписокЭтапов.СтатусЭтапа,
	|	СписокЭтапов.Услуга
	|ПОМЕСТИТЬ ВТ_ТекущиеЭтапы
	|ИЗ
	|	&СписокЭтапов КАК СписокЭтапов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаСписокЭтапов.НомерСтроки,
	|	ЗаказКлиентаСписокЭтапов.СтатусЭтапа,
	|	ЗаказКлиентаСписокЭтапов.Услуга
	|ПОМЕСТИТЬ ВТ_ПредыдущиеЭтапы
	|ИЗ
	|	Документ.ЗаказКлиента.СписокЭтапов КАК ЗаказКлиентаСписокЭтапов
	|ГДЕ
	|	ЗаказКлиентаСписокЭтапов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТекущиеЭтапы.НомерСтроки,
	|	ВТ_ТекущиеЭтапы.СтатусЭтапа КАК ТекущийСтатусЭтапа,
	|	ВТ_ПредыдущиеЭтапы.СтатусЭтапа КАК ПредыдущийСтатусЭтапа
	|ИЗ
	|	ВТ_ТекущиеЭтапы КАК ВТ_ТекущиеЭтапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПредыдущиеЭтапы КАК ВТ_ПредыдущиеЭтапы
	|		ПО ВТ_ТекущиеЭтапы.НомерСтроки = ВТ_ПредыдущиеЭтапы.НомерСтроки
	|		И ВТ_ТекущиеЭтапы.Услуга = ВТ_ПредыдущиеЭтапы.Услуга
	|ГДЕ
	|	ВТ_ТекущиеЭтапы.СтатусЭтапа <> ВТ_ПредыдущиеЭтапы.СтатусЭтапа";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("СписокЭтапов", СписокЭтапов);
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ПредыдущийСтатусЭтапа) Тогда
			// Если предыдущий этап есть
			ПредыдущийСтатусЭтапа = Перечисления.СтатусЭтапа.Индекс(Выборка.ПредыдущийСтатусЭтапа);
			ТекущийСтатусЭтапа = Перечисления.СтатусЭтапа.Индекс(Выборка.ТекущийСтатусЭтапа);
				
			// Можем поднять статус заказа выше только на 1
			Если ТекущийСтатусЭтапа - ПредыдущийСтатусЭтапа = 1 Тогда
				// Меняем статус заказа при изменении этапа
				Если СтатусЗаказа = Перечисления.СтатусЗаказа.Проект Тогда
					СтатусЗаказа = Перечисления.СтатусЗаказа.ВРаботе;
				КонецЕсли;
			Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Статус этапа можно сменить только на один выше";
				Сообщение.Поле = СтрШаблон("СписокЭтапов[%1].СтатусЭтапа", Выборка.НомерСтроки - 1);
				Сообщение.УстановитьДанные(ЭтотОбъект);
				Сообщение.Сообщить();

				Отказ = Истина;
			КонецЕсли;
		Иначе
			// Если такого предыдущего этапа нет
			Если Выборка.ТекущийСтатусЭтапа <> Перечисления.СтатусЭтапа.Планирование Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон("Статус нового этапа №%1 должен быть равен ""Планирование""",
					Выборка.НомерСтроки);
				Сообщение.Поле = СтрШаблон("СписокЭтапов[%1].СтатусЭтапа", Выборка.НомерСтроки - 1);
				Сообщение.УстановитьДанные(ЭтотОбъект);
				Сообщение.Сообщить();

				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьОплатыПоЗаказуПередВыполнениемЭтапов(Отказ)
	// Проверяем сумму оплаты по заказу
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ЗаказКлиентаСписокЭтапов.СтоимостьЭтапа) КАК СтоимостьЭтапов
	|ПОМЕСТИТЬ ВТ_СтоимостьЭтапов
	|ИЗ
	|	Документ.ЗаказКлиента.СписокЭтапов КАК ЗаказКлиентаСписокЭтапов
	|ГДЕ
	|	ЗаказКлиентаСписокЭтапов.Ссылка = &Ссылка
	|	И ЗаказКлиентаСписокЭтапов.СтатусЭтапа <> ЗНАЧЕНИЕ(Перечисление.СтатусЭтапа.Планирование)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДенежныеСредстваОбороты.СуммаПриход, 0) КАК СуммаОплачено
	|ПОМЕСТИТЬ ВТ_СуммаОплат
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Обороты(,,, ЗаказКлиента = &Ссылка) КАК ДенежныеСредстваОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_СтоимостьЭтапов.СтоимостьЭтапов, 0) КАК СуммаКОплате,
	|	ЕСТЬNULL(ВТ_СуммаОплат.СуммаОплачено, 0) КАК СуммаОплачено
	|ИЗ
	|	ВТ_СтоимостьЭтапов КАК ВТ_СтоимостьЭтапов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммаОплат КАК ВТ_СуммаОплат
	|		ПО ИСТИНА";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	Если Выборка.Следующий() Тогда
		СуммаОплачено = Выборка.СуммаОплачено;
		СуммаКОплате = Выборка.СуммаКОплате;
	Иначе
		СуммаОплачено = 0;
		СуммаКОплате = 0;
	КонецЕсли;

	Если СуммаКОплате > СуммаОплачено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(
				"Стоимость этапов в работе (%1 ₽) больше суммы оплаты по заказу (%2 ₽)", СуммаКОплате, СуммаОплачено);
		Сообщение.Поле = "СписокЭтапов";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();

		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьДвиженияДенежныхСредствПоЭтапам(Отказ)
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Выбираем этапы работ, которых нет в регистре накополения
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКлиентаСписокЭтапов.Ссылка,
	|	ЗаказКлиентаСписокЭтапов.НомерСтроки,
	|	ЗаказКлиентаСписокЭтапов.СтоимостьЭтапа
	|ПОМЕСТИТЬ ВТ_СписокЭтапов
	|ИЗ
	|	Документ.ЗаказКлиента.СписокЭтапов КАК ЗаказКлиентаСписокЭтапов
	|ГДЕ
	|	ЗаказКлиентаСписокЭтапов.Ссылка = &Заказ
	|	И ЗаказКлиентаСписокЭтапов.СтатусЭтапа = ЗНАЧЕНИЕ(Перечисление.СтатусЭтапа.ВРаботе)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписокЭтапов.НомерСтроки КАК НомерЭтапа,
	|	ВТ_СписокЭтапов.СтоимостьЭтапа
	|ИЗ
	|	ВТ_СписокЭтапов КАК ВТ_СписокЭтапов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
	|		ПО ВТ_СписокЭтапов.Ссылка = ДенежныеСредства.ЗаказКлиента
	|		И ВТ_СписокЭтапов.НомерСтроки = ДенежныеСредства.НомерЭтапа
	|		И ВТ_СписокЭтапов.СтоимостьЭтапа = ДенежныеСредства.Сумма
	|		И ВТ_СписокЭтапов.Ссылка = ДенежныеСредства.Регистратор
	|ГДЕ
	|	ДенежныеСредства.ЗаказКлиента ЕСТЬ NULL
	|	И ДенежныеСредства.НомерЭтапа ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЭтапа";

	Запрос.УстановитьПараметр("Заказ", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	НаборЗаписей = РегистрыНакопления.ДенежныеСредства.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);

	Пока Выборка.Следующий() Цикл
		Движение = НаборЗаписей.ДобавитьРасход();

		Движение.Регистратор = Ссылка;
		Движение.Период = ТекущаяДатаСеанса();
		Движение.ЗаказКлиента = Ссылка;
		Движение.НомерЭтапа = Выборка.НомерЭтапа;
		Движение.Сумма = Выборка.СтоимостьЭтапа;
	КонецЦикла;

	НаборЗаписей.Записать(Ложь);
КонецПроцедуры

Процедура ПроверитьГрафикОплат(Отказ)
	// Проверяем сумму заказа и сумму оплат
	СуммаПлатежей = ГрафикОплат.Итог("СуммаПлатежа");
	Если СуммаЗаказа <> СуммаПлатежей Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("Сумма заказа (%1 ₽) не равна сумме платежей (%2 ₽)", СуммаЗаказа, СуммаПлатежей);
		Сообщение.Поле = "ГрафикОплат";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();

		Отказ = Истина;
	КонецЕсли;
	
	// Формируем единую таблицу из этапов работ и строк графика
	// Для этапов стоимость отрицательная
	// Вычитаем из даты начала этапа количество дней, за которое этап должен быть оплачен
	// Для графика сумма положительная
	// Сортируем таблицу по дате и по убыванию суммы, чтобы сначала происходило прибавление суммы
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокЭтапов.НомерСтроки,
	|	СписокЭтапов.ДатаНачала,
	|	-СписокЭтапов.СтоимостьЭтапа КАК СтоимостьЭтапа
	|ПОМЕСТИТЬ ВТ_СписокЭтапов
	|ИЗ
	|	&СписокЭтапов КАК СписокЭтапов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикОплат.НомерСтроки,
	|	ГрафикОплат.ДатаПлатежа,
	|	ГрафикОплат.СуммаПлатежа
	|ПОМЕСТИТЬ ВТ_ГрафикОплат
	|ИЗ
	|	&ГрафикОплат КАК ГрафикОплат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписокЭтапов.НомерСтроки,
	|	ДОБАВИТЬКДАТЕ(ВТ_СписокЭтапов.ДатаНачала, ДЕНЬ, -КоличествоДнейДоНачалаЭтапаДляОплаты.Значение) КАК Дата,
	|	ВТ_СписокЭтапов.СтоимостьЭтапа КАК Сумма
	|ИЗ
	|	ВТ_СписокЭтапов КАК ВТ_СписокЭтапов,
	|	Константа.КоличествоДнейДоНачалаЭтапаДляОплаты КАК КоличествоДнейДоНачалаЭтапаДляОплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ГрафикОплат.НомерСтроки,
	|	ВТ_ГрафикОплат.ДатаПлатежа,
	|	ВТ_ГрафикОплат.СуммаПлатежа
	|ИЗ
	|	ВТ_ГрафикОплат КАК ВТ_ГрафикОплат
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Сумма УБЫВ";

	Запрос.УстановитьПараметр("СписокЭтапов", СписокЭтапов);
	Запрос.УстановитьПараметр("ГрафикОплат", ГрафикОплат);

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	СуммаОстаток = 0;

	Пока Выборка.Следующий() Цикл
		СуммаОстаток = СуммаОстаток + Выборка.Сумма;

		Если СуммаОстаток < 0 Тогда
			Сообщение = Новый СообщениеПользователю;

			Если Выборка.Сумма < 0 Тогда
				// Строка этапа
				Сообщение.Текст = СтрШаблон("Этап №%1 начинается раньше, чем его оплата по графику",
					Выборка.НомерСтроки);
				Сообщение.Поле = СтрШаблон("СписокЭтапов[%1].ДатаНачала", Выборка.НомерСтроки - 1);
			Иначе
				// Строка графика
				Сообщение.Текст = СтрШаблон("Платеж №%1 проводится позже, чем начало этапа работы", Выборка.НомерСтроки);
				Сообщение.Поле = СтрШаблон("ГрафикОплат[%1].ДатаПлатежа", Выборка.НомерСтроки - 1);
			КонецЕсли;

			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();

			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура РассчитатьСуммуЗаказа() Экспорт
	// Сначала рассчитаем сумму материалов
	РассчитатьСуммуМатериалов();
	
	// Далее рассчитаем стоимость всех этапов
	РассчитатьСуммуЭтапов();

	СуммаЗаказа = СписокЭтапов.Итог("СтоимостьЭтапа");
КонецПроцедуры

Процедура РассчитатьСуммуМатериалов() Экспорт
	РасчетСуммыВызовСервера.РассчитатьСуммуПоЦенеИКоличеству(СписокМатериалов, "Цена", "Количество", "Сумма");
КонецПроцедуры

Процедура РассчитатьСуммуЭтапов()
	РасчетСуммыВызовСервера.РассчитатьСтоимостьЭтаповВЗаказеКлиента(ЭтотОбъект);
КонецПроцедуры

Процедура ПроверитьНомерЭтапаВСпискеМатериалов(Отказ)
	// 1. Выбираем список этапов
	// 2. Выбираем список материалов
	// 3. Соединяем этапы и материалы, получаем строки материалов, к которым не прикреплен этап
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокЭтапов.НомерСтроки
	|ПОМЕСТИТЬ ВТ_СписокЭтапов
	|ИЗ
	|	&СписокЭтапов КАК СписокЭтапов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокМатериалов.НомерСтроки,
	|	СписокМатериалов.Материал,
	|	СписокМатериалов.НомерЭтапа
	|ПОМЕСТИТЬ ВТ_СписокМатериалов
	|ИЗ
	|	&СписокМатериалов КАК СписокМатериалов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписокМатериалов.НомерСтроки,
	|	ВТ_СписокМатериалов.Материал,
	|	ВТ_СписокМатериалов.НомерЭтапа
	|ИЗ
	|	ВТ_СписокМатериалов КАК ВТ_СписокМатериалов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокЭтапов КАК ВТ_СписокЭтапов
	|		ПО ВТ_СписокМатериалов.НомерЭтапа = ВТ_СписокЭтапов.НомерСтроки
	|ГДЕ
	|	ВТ_СписокЭтапов.НомерСтроки ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_СписокМатериалов.НомерСтроки";

	Запрос.УстановитьПараметр("СписокЭтапов", СписокЭтапов);
	Запрос.УстановитьПараметр("СписокМатериалов", СписокМатериалов);

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("Материал №%1 ""%2"" имеет несуществующий №%3 этапа", Выборка.НомерСтроки,
			Выборка.Материал, Выборка.НомерЭтапа);
		Сообщение.Поле = СтрШаблон("СписокМатериалов[%1].НомерЭтапа", Выборка.НомерСтроки - 1);
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();

		Отказ = Истина;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьДатыЭтапов(Отказ)
	// Проверяем, что в списке этапов дата начала меньше даты конца
	Для Каждого Этап Из СписокЭтапов Цикл
		Если Этап.ДатаНачала > Этап.ДатаОкончания Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон("Этап №%1 с услугой ""%2"" имеет дату начала больше, чем дата окончания",
				Этап.НомерСтроки, Этап.Услуга);
			Сообщение.Поле = СтрШаблон("СписокЭтапов[%1].ДатаНачала", Этап.НомерСтроки - 1);
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();

			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьИсториюИзмененияСтатусовЗаказа(Отказ)
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсторияСтатусовЗаказовСрезПоследних.Заказ,
	|	ИсторияСтатусовЗаказовСрезПоследних.СтатусЗаказа,
	|	ИсторияСтатусовЗаказовСрезПоследних.Ответственный
	|ИЗ
	|	РегистрСведений.ИсторияСтатусовЗаказов.СрезПоследних КАК ИсторияСтатусовЗаказовСрезПоследних
	|ГДЕ
	|	ИсторияСтатусовЗаказовСрезПоследних.Заказ = &Заказ
	|	И ИсторияСтатусовЗаказовСрезПоследних.СтатусЗаказа = &СтатусЗаказа
	|	И ИсторияСтатусовЗаказовСрезПоследних.Ответственный = &Ответственный";

	Запрос.УстановитьПараметр("СтатусЗаказа", СтатусЗаказа);
	Запрос.УстановитьПараметр("Заказ", Ссылка);
	Запрос.УстановитьПараметр("Ответственный", Ответственный);

	РезультатЗапроса = Запрос.Выполнить();
	
	// Если нет такой записи в регистре, то добавляем
	Если РезультатЗапроса.Пустой() Тогда
		НоваяЗапись = РегистрыСведений.ИсторияСтатусовЗаказов.СоздатьМенеджерЗаписи();
		НоваяЗапись.Период = ТекущаяДатаСеанса();
		НоваяЗапись.Заказ = Ссылка;
		НоваяЗапись.СтатусЗаказа = СтатусЗаказа;
		НоваяЗапись.Ответственный = Ответственный;
		НоваяЗапись.Записать(Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьИсториюИзмененияСтатусовЭтапов(Отказ)
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	// Выбираем такие статусы этапов из регистра, которые отличаются от документа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКлиентаСписокЭтапов.Ссылка КАК Ссылка,
	|	ЗаказКлиентаСписокЭтапов.СтатусЭтапа КАК СтатусЭтапа,
	|	ЗаказКлиентаСписокЭтапов.НомерСтроки КАК НомерЭтапа,
	|	ЗаказКлиентаСписокЭтапов.Услуга КАК Услуга,
	|	ЗаказКлиентаСписокЭтапов.Ссылка.Ответственный КАК Ответственный
	|ПОМЕСТИТЬ ВТ_СписокЭтапов
	|ИЗ
	|	Документ.ЗаказКлиента.СписокЭтапов КАК ЗаказКлиентаСписокЭтапов
	|ГДЕ
	|	ЗаказКлиентаСписокЭтапов.Ссылка = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияСтатусовЭтаповСрезПоследних.Заказ КАК Заказ,
	|	ВТ_СписокЭтапов.СтатусЭтапа КАК СтатусЭтапа,
	|	ВТ_СписокЭтапов.НомерЭтапа КАК НомерЭтапа,
	|	ВТ_СписокЭтапов.Услуга КАК Услуга,
	|	ИсторияСтатусовЭтаповСрезПоследних.Ответственный КАК Ответственный
	|ИЗ
	|	ВТ_СписокЭтапов КАК ВТ_СписокЭтапов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЭтапов.СрезПоследних КАК ИсторияСтатусовЭтаповСрезПоследних
	|		ПО (ИсторияСтатусовЭтаповСрезПоследних.Заказ = ВТ_СписокЭтапов.Ссылка)
	|		И (ИсторияСтатусовЭтаповСрезПоследних.СтатусЭтапа = ВТ_СписокЭтапов.СтатусЭтапа)
	|		И (ИсторияСтатусовЭтаповСрезПоследних.НомерЭтапа = ВТ_СписокЭтапов.НомерЭтапа)
	|		И (ИсторияСтатусовЭтаповСрезПоследних.Услуга = ВТ_СписокЭтапов.Услуга)
	|		И (ИсторияСтатусовЭтаповСрезПоследних.Ответственный = ВТ_СписокЭтапов.Ответственный)
	|ГДЕ
	|	ИсторияСтатусовЭтаповСрезПоследних.Заказ ЕСТЬ NULL
	|	И ИсторияСтатусовЭтаповСрезПоследних.Ответственный ЕСТЬ NULL";

	Запрос.УстановитьПараметр("Заказ", Ссылка);
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	НачатьТранзакцию();
	Попытка
		Пока Выборка.Следующий() Цикл
			НоваяЗапись = РегистрыСведений.ИсторияСтатусовЭтапов.СоздатьМенеджерЗаписи();
			НоваяЗапись.Период = ТекущаяДатаСеанса();
			НоваяЗапись.Заказ = Ссылка;
			НоваяЗапись.НомерЭтапа = Выборка.НомерЭтапа;
			НоваяЗапись.Услуга = Выборка.Услуга;

			НоваяЗапись.СтатусЭтапа = Выборка.СтатусЭтапа;
			НоваяЗапись.Ответственный = Ответственный;

			НоваяЗапись.Записать(Истина);
		КонецЦикла;

		ЗафиксироватьТранзакцию();
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;

		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка проведения документа. Неудачная попытка изменения истории этапов";
		Сообщение.Сообщить();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Иначе
	ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли